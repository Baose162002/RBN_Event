@page "{companyId:int}"
@model RBN_FE.Pages.CompanyPages.CompanyDetailsModel
@{
    ViewData["Title"] = "Chi tiết công ty";
}

<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Rise Church</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="~/css/styles.css" asp-append-version="true" />
    <script src="https://unpkg.com/flowbite@1.4.0/dist/flowbite.js"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>
    <partial name="_Header" />

    <div class="w-full h-full ">

        <div class="w-full mx-auto py-10  ">


            <!-- Company Name -->
        <div class="w-[92%] mx-auto flex items-center justify-between py-8">
            <a class="group relative inline-flex items-center overflow-hidden rounded border border-current px-8 py-3 text-indigo-600 focus:outline-none focus:ring active:text-indigo-500"
               href="javascript:history.back()">
                <span class="absolute -start-full transition-all group-hover:start-4">
                    <svg class="size-5 rtl:rotate-180"
                         xmlns="http://www.w3.org/2000/svg"
                         fill="none"
                         viewBox="0 0 24 24"
                         stroke="currentColor">
                        <path stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M7 16l-4-4m0 0l4-4m-4 4h18" />
                    </svg>
                </span>

                <span class="text-sm font-medium transition-all group-hover:ms-4"> Quay lại </span>
            </a>
            <h1 class="lg:text-4xl md:text-3xl xs:text-2xl text-center">
                @(Model.Company?.Name ?? "Chi tiết công ty")
            </h1>
            <div class="w-[100px]"></div> <!-- This empty div helps balance the layout -->
        </div>

            <!-- Company Avatar -->
            @if (!string.IsNullOrEmpty(Model.Company?.Avatar))
            {
                <img src="@Model.Company.Avatar" alt="img" class="xl:w-[80%] xs:w-[96%] mx-auto lg:h-[560px] md:h-[480px] rounded-lg object-cover" />
            }

            <!-- Company Info -->
            <div class="w-[90%] mx-auto flex md:gap-4 xs:gap-2 justify-center items-center pt-4">
                <h3 class="text-sm font-semibold  ">Mã số thuế: @Model.Company?.TaxCode</h3>
                <div class="">|</div>
                <h4 class="text-sm font-semibold  ">Số điện thoại: @Model.Company?.Phone</h4>
            <div class="">|</div>

            <h4 class="text-sm font-semibold  ">Địa chỉ: @Model.Company?.Address</h4>
            </div>

            <!-- Company Details -->
            <div class="py-6  ">
                <div class="md:w-[80%] xs:w-[90%] mx-auto pt-4">
                    @if (Model.Company != null)
                    {
                        <p class="mx-auto text-md  mb-4">
                            <strong>Mô tả:</strong> @Model.Company.Description
                        </p>

                    @if (Model.Company?.Events != null && Model.Company.Events.Any())
                    {
                        <h2 class="font-semibold text-lg mt-8 mb-4 -white">Sự kiện đã tổ chức</h2>
                        @foreach (var evnt in Model.Company.Events)
                        {
                            <div class="mb-6 p-4 bg-gray-100 dark:bg-gray-700 rounded-lg">
                                <h3 class="font-semibold text-lg -white">@evnt.Name</h3>
                                <p class="mt-2 text-md "><strong>Loại sự kiện:</strong> @evnt.EventType</p>
                                <p class="mt-2 text-md"><strong>Giá:</strong> @evnt.Price.ToString("N0") VNĐ</p>
                                <p class="mt-2 text-md "><strong>Mô tả:</strong> @evnt.Description</p>
                            </div>
                        }
                    }

                    }
                    else
                    {
                        <p class="mx-auto text-md ">Không tìm thấy thông tin công ty.</p>
                    }

                @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                {
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                        <span class="block sm:inline">@Model.ErrorMessage</span>
                    </div>
                }

                </div>
            </div>
        </div>
    </div>
<!-- Comment Section -->
<div class="w-[80%] mx-auto p-6 bg-gray-50 rounded-lg shadow-md">
    <h2 class="text-lg font-semibold mb-4 text-gray-800">
        Đánh giá của bạn sau khi sử dụng dịch vụ của @Model.Company?.Name
    </h2>

    <!-- Comment List -->
    <div class="space-y-6">
        @if (Model.FeedBack != null && Model.FeedBack.Count > 0)
        {
            @foreach (var feedback in Model.FeedBack)
            {
                <div class="flex flex-col p-4 bg-white rounded-lg shadow-lg">
                    <!-- User Information -->
                    <div class="flex items-start space-x-4 mb-2">
                        <div class="flex-shrink-0">
                            <img class="h-10 w-10 rounded-full object-cover" src="/img/customerAvatar.png" alt="Avatar" />
                        </div>
                        <div class="flex-1">
                            <div class="text-sm">
                                @{
                                    string userName = "Không xác định";
                                    if (Model.UserNames != null && Model.UserNames.TryGetValue(feedback.UserId, out var name))
                                    {
                                        userName = name;
                                    }
                                }
                                <p class="font-medium text-gray-900">@userName</p>
                                <p class="text-gray-500">@feedback.FeedbackDate.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                            <div class="mt-1 text-sm text-gray-700">
                                @feedback.Comment
                            </div>
                        </div>
                    </div>

                    <!-- Reply Button & Reply Form -->
                    <button onclick="toggleReply(this)" class="mt-2 text-indigo-600 text-sm hover:underline">Phản hồi</button>

                    <!-- Reply Input (Hidden by Default) -->
                    <div class="hidden mt-4 space-y-2 ml-12">
                        <textarea rows="2" class="w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Nhập phản hồi của bạn..."></textarea>
                        <button onclick="sendResponse(@feedback.Id, this)" class="bg-indigo-600 text-white py-1 px-4 rounded hover:bg-indigo-700">Gửi phản hồi</button>
                    </div>

                    <!-- Responses -->
                    @if (Model.Response != null && Model.Response.Any(r => r.FeedBackId == feedback.Id))
                    {
                        <div class="mt-4 space-y-4 pl-12 border-l border-gray-300">
                            @foreach (var response in Model.Response.Where(r => r.FeedBackId == feedback.Id))
                            {
                                <div class="flex items-start space-x-4 mb-2">
                                    <div class="flex-shrink-0">
                                        <img class="h-8 w-8 rounded-full object-cover" src="/img/companyAvatar.jpg" alt="Avatar" />
                                    </div>
                                    <div class="flex-1">
                                        <div class="text-sm">
                                            <p class="font-medium text-gray-900">@Model.Company?.Name</p>
                                            <p class="text-gray-500">@response.ResponseDate.ToString("dd/MM/yyyy HH:mm")</p>
                                        </div>
                                        <div class="mt-1 text-sm text-gray-700">
                                            @response.Comment
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <p class="text-gray-500">Chưa có phản hồi nào.</p>
        }
    </div>
    <!-- Pagination -->
    <div class="flex justify-center mt-4">
        <nav aria-label="Page navigation">
            <ul class="inline-flex items-center -space-x-px">
                <li>
                    <a asp-page="CompanyDetails" asp-route-companyId="@Model.Company?.Id" asp-route-pageIndex="@(Model.PageIndex - 1)" class="px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 @(Model.PageIndex <= 1 ? "cursor-not-allowed text-gray-300 bg-gray-200" : "")">Trước</a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li>
                        <a asp-page="CompanyDetails" asp-route-companyId="@Model.Company?.Id" asp-route-pageIndex="@i" class="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 @(i == Model.PageIndex ? "z-10 text-blue-600 bg-blue-50 border-blue-300" : "")">@i</a>
                    </li>
                }
                <li>
                    <a asp-page="CompanyDetails" asp-route-companyId="@Model.Company?.Id" asp-route-pageIndex="@(Model.PageIndex + 1)" class="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 @(Model.PageIndex >= Model.TotalPages ? "cursor-not-allowed text-gray-300 bg-gray-200" : "")">Sau</a>
                </li>
            </ul>
        </nav>
    </div>
    <!-- Comment Form -->
    <form class="mt-8 space-y-4" method="post" asp-page-handler="SubmitFeedback">
        <div>
            <textarea name="FeedbackContent" rows="4" class="w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Đánh giá của bạn..."></textarea>
        </div>
        <div class="flex justify-end">
            <button type="submit" class="bg-indigo-600 text-white py-2 px-4 rounded hover:bg-indigo-700">Gửi đánh giá</button>
        </div>
    </form>
</div>
<!-- JavaScript for Toggling Reply Input và Gửi Response -->
<script>
    function toggleReply(button) {
        const replyInput = button.nextElementSibling;
        replyInput.classList.toggle('hidden');
    }

    async function sendResponse(feedbackId, button) {
        const replyContainer = button.parentElement;
        const textarea = replyContainer.querySelector('textarea');
        const comment = textarea.value.trim();

        if (comment === "") {
            alert("Vui lòng nhập phản hồi.");
            return;
        }

        // Lấy thông tin công ty từ PageModel (đảm bảo có thuộc tính Id trong Company)
        const companyId = @Model.Company?.Id;

        if (!companyId) {
            alert("Không xác định được công ty.");
            return;
        }

        try {
            const response = await fetch('@Url.Page("/CompanyPages/CompanyDetails", null, new { companyId = Model.Company?.Id }, Request.Scheme)', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({
                    companyId: companyId,
                    feedbackId: feedbackId,
                    comment: comment
                }),
            });

            if (response.ok) {
                const data = await response.json();

                // Tạo phần tử HTML mới cho phản hồi
                const responseDiv = document.createElement('div');
                responseDiv.classList.add('flex', 'items-start', 'space-x-4', 'mb-2');
                responseDiv.innerHTML = `
                        <div class="flex-shrink-0">
                            <img class="h-8 w-8 rounded-full object-cover" src="/img/companyAvatar.jpg" alt="Avatar" />
                        </div>
                        <div class="flex-1">
                            <div class="text-sm">
                                <p class="font-medium text-gray-900">${data.companyName}</p>
                                <p class="text-gray-500">${new Date(data.createdResponse.ResponseDate).toLocaleString()}</p>
                            </div>
                            <div class="mt-1 text-sm text-gray-700">
                                ${data.createdResponse.Comment}
                            </div>
                        </div>
                    `;

                // Thêm phản hồi mới vào DOM
                const responsesContainer = replyContainer.parentElement.querySelector('.pl-12');
                if (responsesContainer) {
                    responsesContainer.appendChild(responseDiv);
                } else {
                    // Nếu chưa có container cho phản hồi, tạo mới
                    const newResponsesContainer = document.createElement('div');
                    newResponsesContainer.classList.add('mt-4', 'space-y-4', 'pl-12', 'border-l', 'border-gray-300');
                    newResponsesContainer.appendChild(responseDiv);
                    replyContainer.parentElement.appendChild(newResponsesContainer);
                }

                // Ẩn input phản hồi và làm trống textarea
                replyContainer.classList.add('hidden');
                textarea.value = "";
            } else {
                const errorText = await response.text();
                alert(`Đã xảy ra lỗi: ${errorText}`);
            }
        } catch (error) {
            console.error('Error:', error);
            alert("Đã xảy ra lỗi khi gửi phản hồi.");
        }
    }

    // Hàm để lấy Anti-Forgery Token từ cookie
    function getAntiForgeryToken() {
        const name = '__RequestVerificationToken';
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            cookie = cookie.trim();
            if (cookie.startsWith(name + '=')) {
                return decodeURIComponent(cookie.substring(name.length + 1));
            }
        }
        return '';
    }
</script>


    <partial name="_Footer" />

</html>